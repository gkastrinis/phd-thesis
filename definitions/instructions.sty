%--------------------------------------------------------------------
% LLVM Styling
%--------------------------------------------------------------------

% Entities

\newcommand{\alloc}[1]{{\widehat{#1}}}
\newcommand{\var}[1]{{\small {\texttt{#1}}}}
\newcommand{\constant}[1]{#1}
\newcommand{\op}[1]{#1}
\newcommand{\tp}[1]{{\small {\texttt{#1}}}}
\newcommand{\instr}[1]{{{\small \code{#1}}}}

\newcommand{\functions}{\mathbb{F}}
\newcommand{\gvars}{\mathbb{G}}
\newcommand{\vars}{{\mathbb{V}}}


% Points-to relations

\newcommand{\aptin}[4]{{{#1}: {#2} \xrightarrow{\text{IN}}_{#3} #4}}
\newcommand{\aptout}[4]{{{#1}: {#2} \xrightarrow{\text{OUT}}_{#3} #4}}
%\newcommand{\aptout}[3]{\var{#1} \mapsto^{#2}_{\text{OUT}} \alloc{#3}}
\newcommand{\cpt}[2]{\constant{#1} \mapsto \alloc{#2}}
\newcommand{\opt}[2]{\op{#1} \mapsto \alloc{#2}}
\newcommand{\derefpt}[2]{\alloc{#1} \leadsto \alloc{#2}}

\newcommand{\cp}[2]{\text{\emph{copy}}\;(\alloc{#1},\, \alloc{#2})}

% Other input or output
\newcommand{\calls}[4]{{#1} \xrightarrow{calls}^{#2}_{#3} {#4}}
\newcommand{\nextinsn}[2]{{#1} \xrightarrow{next} {#2}}
\newcommand{\formalarg}[2]{\ensuremath{{\emph{arg}}^{\var{#1}}_{#2}}}
\newcommand{\actualarg}[2]{\ensuremath{{\emph{arg}}^{#1}_{#2}}}
\newcommand{\subst}[2]{[{#1}/{#2}]}
\newcommand{\reachable}[2]{{\overline{{#1}}^{#2}}}



% Type relations
\newcommand{\typefunc}{\text{\emph{type}}}
\newcommand{\gtype}[1]{\typefunc(#1)}
\newcommand{\alloctype}[1]{\typefunc(\alloc{#1})}
\newcommand{\vartype}[1]{\typefunc(\var{#1})}
\newcommand{\codetype}[1]{\typefunc(\code{#1})}
\newcommand{\typecompat}[2]{\text{\emph{typecompat}}(#1, #2)}

\newcommand{\indices}[1]{\text{\emph{indices}}(\tp{#1})}
\newcommand{\offsetof}{\text{\emph{offsetof}}}

\newcommand{\body}[1]{\text{\emph{body}}(#1)}
\newcommand{\fields}[1]{\text{\emph{fields}}(\tp{#1})}


%--------------------------------------------------------------------
% LLVM Bitcode Instructions
%--------------------------------------------------------------------

\newcommand{\alloca}[2]{\instr{alloca}\; \tp{#1},\, \op{#2}}
\newcommand{\malloc}[1]{\instr{malloc}\; \op{#1}}
\newcommand{\cast}[2]{(\tp{#1\,})\: \var{#2}}
\newcommand{\fieldaddr}[2]{\code{\&} \var{#1} \code{->} #2}
\newcommand{\arreladdr}[2]{\code{\&} \var{#1}\, [\op{#2}]}


% Alloca Instruction
\NewDocumentCommand{\allocainstr}{ o m m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {\var{#2} = \alloca{#3}{#4}}
}

% Malloc Instruction
\NewDocumentCommand{\mallocinstr}{ o m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {\var{#2} = \malloc{#3}}
}

% Cast Instruction
\NewDocumentCommand{\castinstr}{ o m m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {\var{#2} = \cast{#3}{#4}}
}

% Load Instruction
\NewDocumentCommand{\loadinstr}{ o m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {\var{#2} = *\, \var{#3}}
}

% Store Instruction
\NewDocumentCommand{\storeinstr}{ o m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {*\, \var{#2} = \var{#3}}
}

% Return Instruction
\NewDocumentCommand{\returninstr}{ o m }{%
  \IfValueTF {#1}{#1:\ }{}
  {\instr{return}\; \var{#2}}
}

\NewDocumentCommand{\unknowninstr}{ o }{%
  \IfValueTF {#1}{#1:\ }{}
  {\instr{<unknown>}}
}

% Field Access Instruction
\NewDocumentCommand{\fieldaccess}{ o m m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {\var{#2} = \fieldaddr{#3}{#4}}
}

% Array Access Instruction
\NewDocumentCommand{\arrayaccess}{ o m m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {\var{#2} = \arreladdr{#3}{#4}}
}

% Call Instruction
\NewDocumentCommand{\callinstr}{ o m m o >{\SplitList{,}} o }{%
  \IfValueTF {#1}{#1:\ }{}
  {\var{#2} = \op{#3}(
    \IfNoValueTF {#4}{\ldots}{#4 \ProcessList{#5}{\processarg}}
    )
  }
}
\newcommand\processarg[1]{,\, \op{#1}}

% Phi Instruction
\NewDocumentCommand{\phiinstr}{ o m m >{\SplitList{,}} m }{%
  \IfValueTF {#1}{#1:\ }{}
  {\var{#2} =
    \instr{phi} (\op{#3} \ProcessList{#4}{\processarg})
  }
}

% Pointer Arithmetic Instruction
\NewDocumentCommand{\ptraccess}{ o m m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {\var{#2} = \var{#3} + #4}
}



%--------------------------------------------------------------------
% Java Bytecode Instructions
%--------------------------------------------------------------------

% Heap Alloc Instruction
\NewDocumentCommand{\newinstr}{ o m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {\var{#2} = \instr{new}\;\tp{#3}\,()}
}

% Move Instruction
\NewDocumentCommand{\moveinstr}{ o m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {\var{#2} = \var{#3}}
}

% Field Load Instruction
\NewDocumentCommand{\fldloadinstr}{ o m m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {{\IfNoValueTF {#2}{*}{\var{#2}}} = {\IfNoValueTF {#3}{*}{\var{#3}}}\,.\,{\IfNoValueTF {#4}{*}{\code{#4}}}}
}

% Field Store Instruction
\NewDocumentCommand{\fldstoreinstr}{ o m m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {{\IfNoValueTF {#2}{*}{\var{#2}}}\,.\,\code{#3} = {\IfNoValueTF {#4}{*}{\var{#4}}}}
}

% Virtual Call Instruction
\NewDocumentCommand{\vcallinstr}{ o m m o >{\SplitList{,}} o }{%
  \IfValueTF {#1}{#1:\ }{}
  {{\IfNoValueTF {#2}{*}{\var{#2}}}\,.\,\code{#3}(
    {\IfNoValueTF {#4}{*}{#4 \ProcessList{#5}{\processarg}}}
    )
  }
}

% Static Call Instruction
\NewDocumentCommand{\scallinstr}{ o m m m o >{\SplitList{,}} o }{%
  \IfValueTF {#1}{#1:\ }{}
  {\var{#2} = \tp{#3}\,.\,\code{#4}(
    \IfNoValueTF {#5}{\ldots}{#5 \ProcessList{#6}{\processarg}}
    )
  }
}

\newcommand{\fieldpt}[3]{\alloc{#1} \xrightarrow{\code{#2}} \alloc{#3}}

\newcommand{\javastring}[1]{\code{"#1"}}
\newcommand{\reifiedclass}[1]{cls_{\,\tp{#1}}}
\newcommand{\reifiedmethod}[1]{mth_{\,\code{#1}}}
\newcommand{\vptstr}[2]{\var{#1} \mapsto \javastring{#2}}

\newcommand{\lookup}[2]{%
  \text{\emph{lookup}}(\tp{#1},\, \code{#2})}

\newcommand{\subtypeof}[2]{%
  \tp{#1} \code{<:} \tp{#2}}

\newcommand{\fqname}{\text{\emph{fqn}}}
\newcommand{\fqnameof}[1]{%
  \fqname(\,\tp{#1}\,)}

\newcommand{\matchesfunc}{\text{\emph{matches}}}
\newcommand{\matches}[2]{%
  \matchesfunc(\,\alloc{#1},\,\tp{#2}\,)}

\newcommand{\classForName}[1]{\instr{Class.forName}\; (\var{#1})}
\newcommand{\classNewInstance}[1]{\instr{\var{#1}.newInstance}\; ()}
\newcommand{\classGetMethod}[2]{\instr{\var{#1}.getMethod}\; (\var{#2})}
\newcommand{\methodInvoke}[2]{\instr{\var{#1}.invoke}\; (\var{#2})}
\newcommand{\append}[2]{\instr{\var{#1}.append}\; (\var{#2})}
\newcommand{\toString}[1]{\instr{\var{#1}.toString}\; ()}

% Class.forName Instruction
\NewDocumentCommand{\classForNameInstr}{ o m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {\var{#2} = \classForName{#3}}
}

% Class.newInstance Instruction
\NewDocumentCommand{\classNewInstanceInstr}{ o m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {\var{#2} = \classNewInstance{#3}}
}

% Class.getMethod Instruction
\NewDocumentCommand{\classGetMethodInstr}{ o m m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {\var{#2} = \classGetMethod{#3}{#4}}
}

% Method.invoke Instruction
\NewDocumentCommand{\methodInvokeInstr}{ o m m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {\var{#2} = \methodInvoke{#3}{#4}}
}

% *.append Instruction
\NewDocumentCommand{\appendInstr}{ o m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {\append{#2}{#3}}
}

% *.toString Instruction
\NewDocumentCommand{\toStringInstr}{ o m m }{%
  \IfValueTF {#1}{#1:\ }{}
  {\var{#2} = \toString{#3}}
}
